const c="d265053b-d8ee-47d1-b4b8-b14ac07b00cd",a=chrome.identity.getRedirectURL(),s="http://localhost:3000/api";console.log("Using API URL:",s);const l=async()=>{const o=async e=>{const t=await chrome.identity.launchWebAuthFlow({url:e,interactive:!0}),r=new URL(t).searchParams.get("code");if(!r)throw new Error("No authorization code received");return r};try{const e=`https://app.hubspot.com/oauth/authorize?client_id=${c}&redirect_uri=${encodeURIComponent(a)}&scope=content%20oauth`,t=await o(e);return h(t)}catch(e){if(e.message.includes("The user did not approve access"))throw new Error("Authentication cancelled by user");try{const t=`https://app.hubspot.com/oauth-bridge?client_id=${c}&redirect_uri=${encodeURIComponent(a)}&scope=content%20oauth`,r=await o(t);return h(r)}catch(t){throw console.error("Both authentication methods failed:",t),new Error("Authentication failed. Please try again.")}}},h=async o=>{try{const e=await fetch(`${s}/token-exchange`,{method:"POST",headers:{"Content-Type":"application/json","X-Extension-Id":chrome.runtime.id},body:JSON.stringify({grant_type:"authorization_code",code:o,redirect_uri:chrome.identity.getRedirectURL()})});if(!e.ok){const r=await e.text();throw console.error("Token exchange failed:",r),new Error(`Token exchange failed: ${e.status}`)}return await e.json()}catch(e){throw console.error("Error in exchangeCodeForToken:",e),e}},f=async o=>(await fetch(`${s}/account-info`,{method:"POST",headers:{"Content-Type":"application/json","X-Extension-Id":chrome.runtime.id},body:JSON.stringify({access_token:o})})).json(),d=async o=>{try{const e=await fetch(`${s}/token-refresh`,{method:"POST",headers:{"Content-Type":"application/json","X-Extension-Id":chrome.runtime.id},body:JSON.stringify({grant_type:"refresh_token",refresh_token:o})});if(!e.ok){const r=await e.json();throw console.error("Token refresh failed:",r),new Error(`Token refresh failed: ${e.status}`)}return await e.json()}catch(e){throw console.error("Error in refreshAccessToken:",e),e}},u=o=>{if(!o.expiresAt)return console.log("No expiration time found for account:",o),!0;const e=5*60*1e3,t=Date.now();return console.log("Token expiration check:",{currentTime:t,expiresAt:o.expiresAt,timeUntilExpiration:o.expiresAt-t,isExpired:t+e>o.expiresAt}),t+e>o.expiresAt},p=async o=>{if(!o||!o.refreshToken)throw new Error("Invalid account or missing refresh token");try{if(u(o)){console.log("Token expired, refreshing...",o);const e=await d(o.refreshToken),i=((await chrome.storage.sync.get("hubspotAccounts")).hubspotAccounts||[]).map(n=>n.hubId===o.hubId?{...n,accessToken:e.access_token,refreshToken:e.refresh_token,expiresAt:Date.now()+e.expires_in*1e3}:n);return await chrome.storage.sync.set({hubspotAccounts:i}),console.log("Updated account:",i.find(n=>n.hubId===o.hubId)),e.access_token}return o.accessToken}catch(e){throw console.error("Token refresh error:",e),new Error("Failed to refresh token. Please re-authenticate.")}},w=async(o,e)=>{const t=await p(e),r=await fetch(`${s}/module-info`,{method:"POST",credentials:"include",headers:{"Content-Type":"application/json","X-Extension-Id":chrome.runtime.id},body:JSON.stringify({moduleId:o,access_token:t})});if(!r.ok)throw new Error(`Failed to fetch module info: ${r.status}`);return r.json()};export{w as a,f as g,l as i};
